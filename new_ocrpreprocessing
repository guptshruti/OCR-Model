import torch
import cv2
from ultralytics import YOLO
from craft_text_detector import Craft
import numpy as np
from PIL import Image

# Load YOLOv8 model
yolo_model = YOLO('yolov8s.pt')  # YOLOv8 small model

# Craft text detector instance
craft = Craft(output_dir='craft_output/', crop_type="poly", cuda=False)  # Set cuda=True if GPU is available

# YOLO object detection (tables, images, etc.)
def detect_objects(image_path):
    results = yolo_model(image_path)  # Run YOLOv8 detection
    return results

# CRAFT text detection
def detect_text(image_path):
    prediction_result = craft.detect_text(image_path)
    return prediction_result

# Visualize YOLO object detection results
def visualize_yolo_results(image_path, yolo_results):
    image = cv2.imread(image_path)
    for result in yolo_results:
        boxes = result.boxes.xyxy  # Get bounding boxes
        for box in boxes:
            x1, y1, x2, y2 = map(int, box)
            cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
    output_path = 'yolo_detected_image.jpg'
    cv2.imwrite(output_path, image)
    print(f"YOLO result saved to {output_path}")

# Visualize and save detected text regions
def visualize_and_save_text_result(image_path, prediction_result):
    image = cv2.imread(image_path)
    for box in prediction_result["boxes"]:
        box = np.array(box).astype(np.int32)
        cv2.polylines(image, [box], isClosed=True, color=(0, 255, 0), thickness=2)
    output_path = 'detected_text_image.jpg'
    cv2.imwrite(output_path, image)
    print(f"Text detection result saved to {output_path}")

# Main function
if __name__ == "__main__":
    image_path = 'path_to_your_image.jpg'

    # 1. Detect objects (tables, images) using YOLOv8
    yolo_results = detect_objects(image_path)
    visualize_yolo_results(image_path, yolo_results)

    # 2. Detect text using CRAFT
    prediction_result = detect_text(image_path)
    visualize_and_save_text_result(image_path, prediction_result)

    # Free CRAFT model resources
    craft.unload_craftnet_model()
    craft.unload_refinenet_model()
